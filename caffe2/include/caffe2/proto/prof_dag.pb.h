// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/prof_dag.proto

#ifndef PROTOBUF_caffe2_2fproto_2fprof_5fdag_2eproto__INCLUDED
#define PROTOBUF_caffe2_2fproto_2fprof_5fdag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
void protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
void protobuf_ShutdownFile_caffe2_2fproto_2fprof_5fdag_2eproto();

class ProfDAGProto;
class ProfDAGProtos;

// ===================================================================

class ProfDAGProto : public ::google::protobuf::Message {
 public:
  ProfDAGProto();
  virtual ~ProfDAGProto();

  ProfDAGProto(const ProfDAGProto& from);

  inline ProfDAGProto& operator=(const ProfDAGProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfDAGProto& default_instance();

  void Swap(ProfDAGProto* other);

  // implements Message ----------------------------------------------

  ProfDAGProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfDAGProto& from);
  void MergeFrom(const ProfDAGProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float mean = 2;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 2;
  inline float mean() const;
  inline void set_mean(float value);

  // required float stddev = 3;
  inline bool has_stddev() const;
  inline void clear_stddev();
  static const int kStddevFieldNumber = 3;
  inline float stddev() const;
  inline void set_stddev(float value);

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_stddev();
  inline void clear_has_stddev();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float mean_;
  float stddev_;
  friend void  protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fprof_5fdag_2eproto();

  void InitAsDefaultInstance();
  static ProfDAGProto* default_instance_;
};
// -------------------------------------------------------------------

class ProfDAGProtos : public ::google::protobuf::Message {
 public:
  ProfDAGProtos();
  virtual ~ProfDAGProtos();

  ProfDAGProtos(const ProfDAGProtos& from);

  inline ProfDAGProtos& operator=(const ProfDAGProtos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfDAGProtos& default_instance();

  void Swap(ProfDAGProtos* other);

  // implements Message ----------------------------------------------

  ProfDAGProtos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfDAGProtos& from);
  void MergeFrom(const ProfDAGProtos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.ProfDAGProto stats = 1;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline const ::caffe2::ProfDAGProto& stats(int index) const;
  inline ::caffe2::ProfDAGProto* mutable_stats(int index);
  inline ::caffe2::ProfDAGProto* add_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
      stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
      mutable_stats();

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProtos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto > stats_;
  friend void  protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  friend void protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  friend void protobuf_ShutdownFile_caffe2_2fproto_2fprof_5fdag_2eproto();

  void InitAsDefaultInstance();
  static ProfDAGProtos* default_instance_;
};
// ===================================================================


// ===================================================================

// ProfDAGProto

// required string name = 1;
inline bool ProfDAGProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfDAGProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfDAGProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfDAGProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProfDAGProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.name)
  return *name_;
}
inline void ProfDAGProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.name)
}
inline void ProfDAGProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.name)
}
inline void ProfDAGProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.name)
}
inline ::std::string* ProfDAGProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.name)
  return name_;
}
inline ::std::string* ProfDAGProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfDAGProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.name)
}

// required float mean = 2;
inline bool ProfDAGProto::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfDAGProto::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfDAGProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfDAGProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float ProfDAGProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.mean)
  return mean_;
}
inline void ProfDAGProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.mean)
}

// required float stddev = 3;
inline bool ProfDAGProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfDAGProto::set_has_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfDAGProto::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfDAGProto::clear_stddev() {
  stddev_ = 0;
  clear_has_stddev();
}
inline float ProfDAGProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.stddev)
  return stddev_;
}
inline void ProfDAGProto::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.stddev)
}

// -------------------------------------------------------------------

// ProfDAGProtos

// repeated .caffe2.ProfDAGProto stats = 1;
inline int ProfDAGProtos::stats_size() const {
  return stats_.size();
}
inline void ProfDAGProtos::clear_stats() {
  stats_.Clear();
}
inline const ::caffe2::ProfDAGProto& ProfDAGProtos::stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.stats)
  return stats_.Get(index);
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.stats)
  return stats_.Mutable(index);
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::add_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.stats)
  return stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
ProfDAGProtos::stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.stats)
  return stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
ProfDAGProtos::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.stats)
  return &stats_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2fproto_2fprof_5fdag_2eproto__INCLUDED
